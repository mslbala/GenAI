curl --location 'https://api.groq.com/openai/v1/chat/completions' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer token' \
--header 'Cookie: __cf_bm=D9vYyuh8Js50l2sKVO.uBGRSLCWE72BQei8OBq3vZRA-1757734473-1.0.1.1-zEw1IK8ptuvyd1yYt0dIQM3fJMC_wlKpv2GvR4wOG0vZG9O2xjdy2kRk2u0_g8vvfW3_s3_kfGL6ZIG9Z1lPVGZhn7VrdohmLtn26iDBlBQ' \
--data-raw '{  "messages":[{"role":"user","content":"You are a Senior Test Automation Architect & AI Code Assistant helping me migrate my Selenium Java Page Object Model to Playwright with TypeScript using best practices. Context: * I have an existing Selenium Java POM class (see code below). * I want it converted into Playwright Page Object(s) in TypeScript. * I am using VS Code on a fresh Playwright project with TypeScript enabled. * I want to follow Playwright best practices for selectors, assertions, and auto-waiting. Instructions: 1. Convert the given Selenium Java class into a Playwright TypeScript POM, using page.locator() for all selectors. 2. Replace explicit waits with Playwright’s auto-waiting. 3. Add element-based assertions (not URL-based) to validate page state after major actions (like login). 4. Use async/await correctly — no chaining that breaks Promises. 5. Suggest a clean folder structure for pages/ and tests/ in VS Code and name the files appropriately. 6. Provide an example login.test.ts showing how to use the POM. 7. Add comments line with Playwright best practices. Input: package pages; import org.openqa.selenium.By; import org.openqa.selenium.chrome.ChromeDriver; import base.ProjectSpecificMethods; public class LoginPage extends ProjectSpecificMethods { public LoginPage(ChromeDriver driver) { this.driver = driver; } public LoginPage enterUsername(String username) throws InterruptedException { driver.findElement(By.id(\"username\")).sendKeys(username); return this; } public LoginPage enterPassword(String password) { driver.findElement(By.id(\"password\")).sendKeys(password); return this; } public HomePage clickLoginButton() { driver.findElement(By.className(\"decorativeSubmit\")).click(); return new HomePage(driver); } } package pages; import org.openqa.selenium.By; import org.openqa.selenium.chrome.ChromeDriver; import base.ProjectSpecificMethods; public class HomePage extends ProjectSpecificMethods { public HomePage(ChromeDriver driver) { this.driver = driver; } public LoginPage clickLogoutButton() { driver.findElement(By.className(\"decorativeSubmit\")).click(); return new LoginPage(driver); } public MyHomePage clickCrmsfaLink() { driver.findElement(By.linkText(\"CRM/SFA\")).click(); return new MyHomePage(driver); } public HomePage verifyHomePage() { boolean displayed = driver.findElement(By.linkText(\"CRM/SFA\")).isDisplayed(); if (displayed) { System.out.println(\"Home Page is loaded\"); } return this; } } package base; import java.io.IOException; import java.time.Duration; import org.openqa.selenium.chrome.ChromeDriver; import org.testng.annotations.AfterMethod; import org.testng.annotations.BeforeMethod; import org.testng.annotations.DataProvider; import io.github.bonigarcia.wdm.WebDriverManager; import utils.ReadExcel; public class ProjectSpecificMethods { public ChromeDriver driver; public String excelFileName; @DataProvider(name=\"fetchData\") public String[][] sendData() throws IOException { return ReadExcel.excelRead(excelFileName); } @BeforeMethod public void startApp() { WebDriverManager.chromedriver().setup(); driver = new ChromeDriver(); driver.manage().window().maximize(); driver.get(\"http://leaftaps.com/opentaps/control/main\"); driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5)); } @AfterMethod public void closeBrowser() { driver.close(); } } Output: * Converted TypeScript class(es) with Playwright syntax * Example test file (.spec.ts) using the new class.Give me only the code and no additional details and no folder structure"}],
    "temperature":0.2,
    "model": "llama-3.3-70b-versatile"
    }
'